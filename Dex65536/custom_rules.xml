<?xml version="1.0" encoding="UTF-8"?>
<project name="custom_rules">
    <dirname property="custom_rules.basedir" file="${ant.file.custom_rules}"/>
    <path id="pathtool.antlibs">
        <pathelement path="${custom_rules.basedir}/pathtool.jar" />
    </path>
    <taskdef resource="anttasks.properties" classpathref="pathtool.antlibs"/>
        
    <property name="packtool.lib.1" value="libs-1"/>
    <property name="packtool.lib.2" value="libs-2"/>
    <property name="packtool.lib.2" value="libs-3"/>
    
    <property name="packtool.path.1" value="/android-support-v4.jar"/>
    <property name="packtool.path.2" value="/10k-methods.jar"/>
    <property name="packtool.path.3" value="/Lib/"/>

    <target name="-post-compile">
        <!--
        - pathtool task:
        - libs="libs/" means pack all .jar library into the secondary dex.
        - if you to pack specific .jar into the secondary dex, change it to
        - libs="/android-support-v4.jar,/10k-methods.jar"
        - 
        - target modification for multiple dex per project compilation:
        - since the reference id out.dex.jar.assets stores the full path of
        - the libraries specified in each pathtool task, I've used path tool
        - to get the full path of each library for me, then pass the listed
        - paths to the <path> of the <dex> task.
        - that last <pathtool> tasks serves as the final list of paths that
        - were excluded from the project's main classes.dex, the list of
        - paths of this last call for <pathtool> should be all paths that
        - are specified on the previous <pathtool> calls.
        -->
        
        <mkdir dir="${out.absolute.dir}/${packtool.lib.1}.apk"/>
        <mkdir dir="${out.absolute.dir}/${packtool.lib.2}.apk"/>
        <mkdir dir="${out.absolute.dir}/${packtool.lib.3}.apk"/>
        
        <!-- LIB - 1 -->
        <pathtool
            libs="${packtool.path.1}"
            refid="project.all.jars.path"
            excludeRefid="out.dex.jar.input.ref"
            includeRefid="out.dex.jar.assets" />
        <dex executable="${dx}"
                output="${out.absolute.dir}/${packtool.lib.1}.apk/classes.dex"
                dexedlibs="${out.absolute.dir}/${packtool.lib.1}.apk"
                nolocals="true"
                forceJumbo="false"
                disableDexMerger="false">
            <path refid="out.dex.jar.assets" />
        </dex>
        <zip destfile="${out.absolute.dir}/${packtool.lib.1}-unaligned.apk"
            basedir="${out.absolute.dir}/${packtool.lib.1}.apk"
            includes="classes.dex"
            update="true"/>
        <zipalign
            executable="${zipalign}"
            input="${out.absolute.dir}/${packtool.lib.1}-unaligned.apk"
            output="${asset.absolute.dir}/${packtool.lib.1}.apk"
            verbose="${verbose}" />
        
        <!-- LIB - 2 -->
        <pathtool
            libs="${packtool.path.2}"
            refid="project.all.jars.path"
            excludeRefid="out.dex.jar.input.ref"
            includeRefid="out.dex.jar.assets" />
        <dex executable="${dx}"
                output="${out.absolute.dir}/${packtool.lib.2}.apk/classes.dex"
                dexedlibs="${out.absolute.dir}/${packtool.lib.2}.apk"
                nolocals="true"
                forceJumbo="false"
                disableDexMerger="false">
            <path refid="out.dex.jar.assets" />
        </dex>
        <zip destfile="${out.absolute.dir}/${packtool.lib.2}-unaligned.apk"
            basedir="${out.absolute.dir}/${packtool.lib.2}.apk"
            includes="classes.dex"
            update="true"/>
        <zipalign
            executable="${zipalign}"
            input="${out.absolute.dir}/${packtool.lib.2}-unaligned.apk"
            output="${asset.absolute.dir}/${packtool.lib.2}.apk"
            verbose="${verbose}" />
        
        <!-- LIB - 3 -->
        <pathtool
            libs="${packtool.path.3}"
            refid="project.all.jars.path"
            excludeRefid="out.dex.jar.input.ref"
            includeRefid="out.dex.jar.assets" />
        <dex executable="${dx}"
                output="${out.absolute.dir}/${packtool.lib.3}.apk/classes.dex"
                dexedlibs="${out.absolute.dir}/${packtool.lib.3}.apk"
                nolocals="true"
                forceJumbo="false"
                disableDexMerger="false">
            <path refid="out.dex.jar.assets" />
        </dex>
        <zip destfile="${out.absolute.dir}/${packtool.lib.3}-unaligned.apk"
            basedir="${out.absolute.dir}/${packtool.lib.3}.apk"
            includes="classes.dex"
            update="true"/>
        <zipalign
            executable="${zipalign}"
            input="${out.absolute.dir}/${packtool.lib.3}-unaligned.apk"
            output="${asset.absolute.dir}/${packtool.lib.3}.apk"
            verbose="${verbose}" />
        
        <!-- LIBS -->
        <pathtool
            libs="${packtool.path.1},${packtool.path.2},${packtool.path.3}"
            refid="project.all.jars.path"
            excludeRefid="out.dex.jar.input.ref"
            includeRefid="out.dex.jar.assets" />
    </target>

    <target name="-post-package">
        <delete file="${asset.absolute.dir}/libs.apk"/>
    </target>

    <target name="run">
        <xpath input="${manifest.abs.file}" expression="/manifest/@package" output="manifest.package" />
        <xpath input="${manifest.abs.file}" expression="/manifest/application/activity[intent-filter/action/@android:name=&quot;android.intent.action.MAIN&quot; and intent-filter/category/@android:name=&quot;android.intent.category.LAUNCHER&quot;]/@android:name"
            output="manifest.activity"/>
        <echo>component: ${manifest.package}/${manifest.activity}</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="am" />
            <arg value="force-stop" />
            <arg value="${manifest.package}" />
        </exec>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="am" />
            <arg value="start" />
            <arg value="-n" />
            <arg value="${manifest.package}/${manifest.activity}" />
            <arg value="-W" />
        </exec>
    </target>
    <target name="rund">
        <xpath input="${manifest.abs.file}" expression="/manifest/@package" output="manifest.package" />
        <xpath input="${manifest.abs.file}" expression="/manifest/application/activity[intent-filter/action/@android:name=&quot;android.intent.action.MAIN&quot; and intent-filter/category/@android:name=&quot;android.intent.category.LAUNCHER&quot;]/@android:name"
            output="manifest.activity"/>
        <echo>component: ${manifest.package}/${manifest.activity}</echo>
        <echo>Debug package ${mainfest.package}. You should prepare your eclipse.</echo>
        <echo>Keep your project open, and if you get a red bug icon in DDMS, you</echo>
        <echo>should stop and manually debug it once.</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="am" />
            <arg value="force-stop" />
            <arg value="${manifest.package}" />
        </exec>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="am" />
            <arg value="set-debug-app" />
            <arg value="${manifest.package}" />
        </exec>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="am" />
            <arg value="start" />
            <arg value="-n" />
            <arg value="${manifest.package}/${manifest.activity}" />
            <arg value="-W" />
            <arg value="-D" />
        </exec>
    </target>

    <target name="help">
        <!-- displays starts at col 13
              |13                                                              80| -->
        <echo>Android Ant Build. Available targets:</echo>
        <echo>   help:      Displays this help.</echo>
        <echo>   clean:     Removes output files created by other targets.</echo>
        <echo>              This calls the same target on all dependent projects.</echo>
        <echo>              Use 'ant nodeps clean' to only clean the local project</echo>
        <echo>   debug:     Builds the application and signs it with a debug key.</echo>
        <echo>              The 'nodeps' target can be used to only build the</echo>
        <echo>              current project and ignore the libraries using:</echo>
        <echo>              'ant nodeps debug'</echo>
        <echo>   release:   Builds the application. The generated apk file must be</echo>
        <echo>              signed before it is published.</echo>
        <echo>              The 'nodeps' target can be used to only build the</echo>
        <echo>              current project and ignore the libraries using:</echo>
        <echo>              'ant nodeps release'</echo>
        <echo>   instrument:Builds an instrumented package and signs it with a</echo>
        <echo>              debug key.</echo>
        <echo>   test:      Runs the tests. Project must be a test project and</echo>
        <echo>              must have been built. Typical usage would be:</echo>
        <echo>                  ant [emma] debug install test</echo>
        <echo>   emma:      Transiently enables code coverage for subsequent</echo>
        <echo>              targets.</echo>
        <echo>   install:   Installs the newly build package. Must either be used</echo>
        <echo>              in conjunction with a build target (debug/release/</echo>
        <echo>              instrument) or with the proper suffix indicating</echo>
        <echo>              which package to install (see below).</echo>
        <echo>              If the application was previously installed, the</echo>
        <echo>              application is reinstalled if the signature matches.</echo>
        <echo>   installd:  Installs (only) the debug package.</echo>
        <echo>   installr:  Installs (only) the release package.</echo>
        <echo>   installi:  Installs (only) the instrumented package.</echo>
        <echo>   installt:  Installs (only) the test and tested packages (unless</echo>
        <echo>              nodeps is used as well.</echo>
        <echo>   uninstall: Uninstalls the application from a running emulator or</echo>
        <echo>              device. Also uninstall tested package if applicable</echo>
        <echo>              unless 'nodeps' is used as well.</echo>
        <echo></echo>
        <echo>Custom targets:</echo>
        <echo>   run:       Run your application.</echo>
        <echo>   rund:      Run and attach to debugger.</echo>
        <echo></echo>
        <echo>--&gt; Example:</echo>
        <echo>--&gt;    ant debug install run</echo>
        <echo>--&gt;    ant rund</echo>
    </target>

</project>
